"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[739],{6251:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"examples/azure-example","title":"Azure Resource Provisioning Example","description":"So for example, we want to provision some Azure services like this:","source":"@site/docs/examples/azure-example.md","sourceDirName":"examples","slug":"/examples/azure-example","permalink":"/ModularPipelines/docs/examples/azure-example","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Azure Resource Provisioning Example"},"sidebar":"tutorialSidebar","previous":{"title":"Examples","permalink":"/ModularPipelines/docs/category/examples"},"next":{"title":".NET Test, Build & Publish","permalink":"/ModularPipelines/docs/examples/dotnet-test-build-publish"}}');var i=o(4848),r=o(8453);const s={title:"Azure Resource Provisioning Example"},a="Azure Resource Provisioning Example",l={},c=[{value:"Managed User Assigned Identity",id:"managed-user-assigned-identity",level:2},{value:"Blob Storage Account",id:"blob-storage-account",level:2},{value:"Blob Storage Container",id:"blob-storage-container",level:2},{value:"Blob Storage Access via User Identity",id:"blob-storage-access-via-user-identity",level:2},{value:"Azure Function",id:"azure-function",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"azure-resource-provisioning-example",children:"Azure Resource Provisioning Example"})}),"\n",(0,i.jsx)(n.p,{children:"So for example, we want to provision some Azure services like this:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A user assigned identity"}),"\n",(0,i.jsx)(n.li,{children:"A blob storage account that can only be accessed via the user assigned identity we created"}),"\n",(0,i.jsx)(n.li,{children:"A blob storage container under that account"}),"\n",(0,i.jsx)(n.li,{children:"An azure function, with our user assigned identity being used for its identity, meaning it would have access to the blob storage"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"That would look like this:"}),"\n",(0,i.jsx)(n.h2,{id:"managed-user-assigned-identity",children:"Managed User Assigned Identity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class ProvisionUserAssignedIdentityModule : Module<UserAssignedIdentityResource>\n{\n    protected override async Task<UserAssignedIdentityResource?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        var userAssignedIdentityProvisionResponse = await context.Azure().Provisioner.Security.UserAssignedIdentity(\n            new AzureResourceIdentifier("MySubscription", "MyResourceGroup", "MyUserIdentity"),\n            new UserAssignedIdentityData(AzureLocation.UKSouth)\n        );\n        \n        return userAssignedIdentityProvisionResponse.Value;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"blob-storage-account",children:"Blob Storage Account"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class ProvisionBlobStorageAccountModule : Module<StorageAccountResource>\n{\n    protected override async Task<StorageAccountResource?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        var blobStorageAccountProvisionResponse = await context.Azure().Provisioner.Storage.StorageAccount(\n            new AzureResourceIdentifier("MySubscription", "MyResourceGroup", "MyStorage"),\n            new StorageAccountCreateOrUpdateContent(new StorageSku(StorageSkuName.StandardGrs), StorageKind.BlobStorage, AzureLocation.UKSouth)\n        );\n        \n        return blobStorageAccountProvisionResponse.Value;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"blob-storage-container",children:"Blob Storage Container"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[DependsOn<ProvisionBlobStorageAccountModule>]\npublic class ProvisionBlobStorageContainerModule : Module<BlobContainerResource>\n{\n    protected override async Task<BlobContainerResource?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        var blobStorageAccount = await GetModule<ProvisionBlobStorageAccountModule>();\n\n        var blobContainerProvisionResponse = await context.Azure().Provisioner.Storage.BlobContainer(\n            blobStorageAccount.Value!.Id,\n            "MyContainer",\n            new BlobContainerData()\n        );\n        \n        return blobContainerProvisionResponse.Value;\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"blob-storage-access-via-user-identity",children:"Blob Storage Access via User Identity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[DependsOn<ProvisionBlobStorageAccountModule>]\n[DependsOn<ProvisionUserAssignedIdentityModule>]\npublic class AssignAccessToBlobStorageModule : Module<RoleAssignmentResource>\n{\n    protected override async Task<RoleAssignmentResource?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        var userAssignedIdentity = await GetModule<ProvisionUserAssignedIdentityModule>();\n        \n        var storageAccount = await GetModule<ProvisionBlobStorageAccountModule>();\n        \n        var roleAssignmentResource = await context.Azure().Provisioner.Security.RoleAssignment(\n            storageAccount.Value!.Id,\n            new RoleAssignmentCreateOrUpdateContent(WellKnownRoleDefinitions.BlobStorageOwnerDefinitionId, userAssignedIdentity.Value!.Data.PrincipalId!.Value)\n        );\n        \n        return roleAssignmentResource.Value;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"azure-function",children:"Azure Function"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[DependsOn<ProvisionUserAssignedIdentityModule>]\n[DependsOn<ProvisionBlobStorageAccountModule>]\n[DependsOn<ProvisionBlobStorageContainerModule>]\npublic class ProvisionAzureFunction : Module<WebSiteResource>\n{\n    protected override async Task<WebSiteResource?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        var userAssignedIdentity = await GetModule<ProvisionUserAssignedIdentityModule>();\n\n        var storageAccount = await GetModule<ProvisionBlobStorageAccountModule>();\n        var blobContainer = await GetModule<ProvisionBlobStorageContainerModule>();\n        \n        var functionProvisionResponse = await context.Azure().Provisioner.Compute.WebSite(\n            new AzureResourceIdentifier("MySubscription", "MyResourceGroup", "MyFunction"),\n            new WebSiteData(AzureLocation.UKSouth)\n            {\n                Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.UserAssigned)\n                {\n                    UserAssignedIdentities = { { userAssignedIdentity.Value!.Id, new UserAssignedIdentity() } }\n                },\n                SiteConfig = new SiteConfigProperties\n                {\n                    AppSettings = new List<AppServiceNameValuePair>\n                    {\n                        new()\n                        {\n                            Name = "BlobStorageConnectionString",\n                            Value = storageAccount.Value!.Data.PrimaryEndpoints.BlobUri.AbsoluteUri\n                        },\n                        new()\n                        {\n                            Name = "BlobContainerName",\n                            Value = blobContainer.Value!.Data.Name\n                        }\n                    }\n                }\n                // ... Other properties\n            }\n        );\n        \n        return functionProvisionResponse.Value;\n    }\n'})}),"\n",(0,i.jsx)(n.p,{children:"So we can clearly see what depends on what."}),"\n",(0,i.jsx)(n.p,{children:"Every module is isolated."}),"\n",(0,i.jsx)(n.p,{children:"Every module will automatically run in parallel unless it is dependent on another module."}),"\n",(0,i.jsx)(n.p,{children:"A module with a dependency can retrieve the data from another module."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(6540);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);