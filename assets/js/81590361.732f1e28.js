"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[64],{2935:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"examples/dotnet-test-build-publish","title":".NET Test, Build & Publish","description":"Here\'s an example of publishing a NuGet package. Complete with generating sematic versioning, and running tests.","source":"@site/docs/examples/dotnet-test-build-publish.md","sourceDirName":"examples","slug":"/examples/dotnet-test-build-publish","permalink":"/ModularPipelines/docs/examples/dotnet-test-build-publish","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":".NET Test, Build & Publish"},"sidebar":"tutorialSidebar","previous":{"title":"Azure Resource Provisioning Example","permalink":"/ModularPipelines/docs/examples/azure-example"},"next":{"title":"Fully Orchestrated Example","permalink":"/ModularPipelines/docs/examples/example"}}');var i=t(4848),o=t(8453);const a={title:".NET Test, Build & Publish"},r=".NET Test, Build & Publish",l={},c=[{value:"Generate Version Number",id:"generate-version-number",level:2},{value:"Pack Projects",id:"pack-projects",level:2},{value:"Run Unit Tests",id:"run-unit-tests",level:2},{value:"Upload Packages",id:"upload-packages",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"net-test-build--publish",children:".NET Test, Build & Publish"})}),"\n",(0,i.jsx)(n.p,{children:"Here's an example of publishing a NuGet package. Complete with generating sematic versioning, and running tests."}),"\n",(0,i.jsx)(n.h2,{id:"generate-version-number",children:"Generate Version Number"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class NugetVersionGeneratorModule : Module<string>\n{\n    protected override async Task<string?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        var gitVersionInformation = await context.Git().Versioning.GetGitVersioningInformation();\n        return gitVersionInformation.FullSemVer;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"pack-projects",children:"Pack Projects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[DependsOn<NugetVersionGeneratorModule>]\npublic class PackProjectsModule : Module<CommandResult[]>\n{\n    protected override async Task<CommandResult[]?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        var packageVersion = await GetModule<NugetVersionGeneratorModule>();\n\n        var projects = context.Git().RootDirectory\n            .GetFiles(x =>\n                x.Extension == ".csproj" && !x.Name.Contains("test", StringComparison.InvariantCultureIgnoreCase))\n            .ToList();\n        \n        return await projects\n            .ToAsyncProcessorBuilder()\n            .SelectAsync(async projectFile => await context.DotNet().Pack(new DotNetPackOptions\n            {\n                TargetPath = projectFile.Path,\n                IncludeSource = true,\n                Properties = new List<string>\n                {\n                    $"PackageVersion={packageVersion.Value}",\n                    $"Version={packageVersion.Value}",\n                },\n            }, cancellationToken))\n            .ProcessOneAtATime();\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"run-unit-tests",children:"Run Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[DependsOn<PackProjectsModule>]\npublic class RunUnitTestsModule : Module<DotNetTestResult[]>\n{\n    protected override async Task<DotNetTestResult[]?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        return await context.Git().RootDirectory\n            .GetFiles(file => file.Path.EndsWith(".csproj", StringComparison.OrdinalIgnoreCase)\n                              && file.Path.Contains("UnitTests", StringComparison.OrdinalIgnoreCase))\n            .ToAsyncProcessorBuilder()\n            .SelectAsync(async unitTestProjectFile => await context.DotNet().Test(new DotNetTestOptions\n            {\n                TargetPath = unitTestProjectFile.Path,\n                Collect = "XPlat Code Coverage",\n            }, cancellationToken))\n            .ProcessInParallel();\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"upload-packages",children:"Upload Packages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[DependsOn<RunUnitTestsModule>]\n[DependsOn<PackProjectsModule>]\npublic class UploadPackagesToNugetModule : Module<CommandResult[]>\n{\n    private readonly IOptions<NuGetSettings> _nugetSettings;\n\n    public UploadPackagesToNugetModule(IOptions<NuGetSettings> nugetSettings, IOptions<PublishSettings> publishSettings)\n    {\n        _nugetSettings = nugetSettings;\n    }\n\n    protected override async Task<CommandResult[]?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        ArgumentNullException.ThrowIfNull(_nugetSettings.Value.ApiKey);\n\n        var packages = context.Git().RootDirectory\n            .GetFiles(x =>\n                x.Extension == ".nupkg")\n            .ToList();\n\n        return await context.NuGet()\n            .UploadPackages(new NuGetUploadOptions(packages.AsPaths(), new Uri("https://api.nuget.org/v3/index.json"))\n            {\n                ApiKey = _nugetSettings.Value.ApiKey!,\n            });\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);