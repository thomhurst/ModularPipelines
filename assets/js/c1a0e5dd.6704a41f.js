"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[378],{4142:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Modular Pipelines","href":"/ModularPipelines/docs/","docId":"README","unlisted":false},{"type":"link","label":"Fundamentals","href":"/ModularPipelines/docs/fundamentals","docId":"fundamentals","unlisted":false},{"type":"category","label":"How-To","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Pipeline Host","href":"/ModularPipelines/docs/how-to/pipeline-host","docId":"how-to/pipeline-host","unlisted":false},{"type":"link","label":"Defining Modules","href":"/ModularPipelines/docs/how-to/defining-modules","docId":"how-to/defining-modules","unlisted":false},{"type":"link","label":"Execution and Dependencies","href":"/ModularPipelines/docs/how-to/execution-and-dependencies","docId":"how-to/execution-and-dependencies","unlisted":false},{"type":"link","label":"Sharing data across modules","href":"/ModularPipelines/docs/how-to/sharing-data","docId":"how-to/sharing-data","unlisted":false},{"type":"link","label":"Run conditions","href":"/ModularPipelines/docs/how-to/run-conditions","docId":"how-to/run-conditions","unlisted":false},{"type":"link","label":"Retry Policies","href":"/ModularPipelines/docs/how-to/retry-policy","docId":"how-to/retry-policy","unlisted":false},{"type":"link","label":"Skipping Modules","href":"/ModularPipelines/docs/how-to/skipping","docId":"how-to/skipping","unlisted":false},{"type":"link","label":"Logging","href":"/ModularPipelines/docs/how-to/logging","docId":"how-to/logging","unlisted":false},{"type":"link","label":"Always Run","href":"/ModularPipelines/docs/how-to/always-run","docId":"how-to/always-run","unlisted":false},{"type":"link","label":"Analyzers","href":"/ModularPipelines/docs/how-to/analyzers","docId":"how-to/analyzers","unlisted":false},{"type":"link","label":"Cancellation Tokens","href":"/ModularPipelines/docs/how-to/cancellation-tokens","docId":"how-to/cancellation-tokens","unlisted":false},{"type":"link","label":"Categories","href":"/ModularPipelines/docs/how-to/categories","docId":"how-to/categories","unlisted":false},{"type":"link","label":"Console Progress","href":"/ModularPipelines/docs/how-to/console-progress","docId":"how-to/console-progress","unlisted":false},{"type":"link","label":"Custom Commands","href":"/ModularPipelines/docs/how-to/custom-commands","docId":"how-to/custom-commands","unlisted":false},{"type":"link","label":"Hooks","href":"/ModularPipelines/docs/how-to/hooks","docId":"how-to/hooks","unlisted":false},{"type":"link","label":"Ignoring Failures","href":"/ModularPipelines/docs/how-to/ignoring-failures","docId":"how-to/ignoring-failures","unlisted":false},{"type":"link","label":"Inheriting","href":"/ModularPipelines/docs/how-to/inheriting","docId":"how-to/inheriting","unlisted":false},{"type":"link","label":"Parallelization","href":"/ModularPipelines/docs/how-to/parallelization","docId":"how-to/parallelization","unlisted":false},{"type":"link","label":"Pipeline Execution Modes","href":"/ModularPipelines/docs/how-to/pipeline-modes","docId":"how-to/pipeline-modes","unlisted":false},{"type":"link","label":"Requirements","href":"/ModularPipelines/docs/how-to/requirements","docId":"how-to/requirements","unlisted":false},{"type":"link","label":"Secrets","href":"/ModularPipelines/docs/how-to/secrets","docId":"how-to/secrets","unlisted":false},{"type":"link","label":"Module History","href":"/ModularPipelines/docs/how-to/storing-and-retrieving-results","docId":"how-to/storing-and-retrieving-results","unlisted":false},{"type":"link","label":"Sub-Modules","href":"/ModularPipelines/docs/how-to/sub-modules","docId":"how-to/sub-modules","unlisted":false},{"type":"link","label":"Time Estimator","href":"/ModularPipelines/docs/how-to/time-estimator","docId":"how-to/time-estimator","unlisted":false},{"type":"link","label":"Timeouts","href":"/ModularPipelines/docs/how-to/timeouts","docId":"how-to/timeouts","unlisted":false}],"href":"/ModularPipelines/docs/category/how-to"},{"type":"category","label":"Additional Packages","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"GitHub Package","href":"/ModularPipelines/docs/mp-packages/github","docId":"mp-packages/github","unlisted":false}],"href":"/ModularPipelines/docs/category/additional-packages"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Azure Resource Provisioning Example","href":"/ModularPipelines/docs/examples/azure-example","docId":"examples/azure-example","unlisted":false},{"type":"link","label":".NET Test, Build & Publish","href":"/ModularPipelines/docs/examples/dotnet-test-build-publish","docId":"examples/dotnet-test-build-publish","unlisted":false},{"type":"link","label":"Fully Orchestrated Example","href":"/ModularPipelines/docs/examples/example","docId":"examples/example","unlisted":false}],"href":"/ModularPipelines/docs/category/examples"},{"type":"link","label":"Why Modular Pipelines?","href":"/ModularPipelines/docs/why","docId":"why","unlisted":false}]},"docs":{"examples/azure-example":{"id":"examples/azure-example","title":"Azure Resource Provisioning Example","description":"So for example, we want to provision some Azure services like this:","sidebar":"tutorialSidebar"},"examples/dotnet-test-build-publish":{"id":"examples/dotnet-test-build-publish","title":".NET Test, Build & Publish","description":"Here\'s an example of publishing a NuGet package. Complete with generating sematic versioning, and running tests.","sidebar":"tutorialSidebar"},"examples/example":{"id":"examples/example","title":"Fully Orchestrated Example","description":"The pipeline to test, generate and upload the NuGet packages for this library.. is made from this library.","sidebar":"tutorialSidebar"},"fundamentals":{"id":"fundamentals","title":"Fundamentals","description":"Pipeline Host","sidebar":"tutorialSidebar"},"how-to/always-run":{"id":"how-to/always-run","title":"Always Run","description":"Module Run Types","sidebar":"tutorialSidebar"},"how-to/analyzers":{"id":"how-to/analyzers","title":"Analyzers","description":"Built-in","sidebar":"tutorialSidebar"},"how-to/cancellation-tokens":{"id":"how-to/cancellation-tokens","title":"Cancellation Tokens","description":"When you override a Module\'s ExecuteAsync method, you are provided a CancellationToken by the framework.","sidebar":"tutorialSidebar"},"how-to/categories":{"id":"how-to/categories","title":"Categories","description":"Sometimes we want to run only certain parts of a pipeline, or we might want to split a pipeline up into different targets. For instance, a test run, and then later on a deploy run. Categories can help achieve that.","sidebar":"tutorialSidebar"},"how-to/console-progress":{"id":"how-to/console-progress","title":"Console Progress","description":"If you are using an interactive terminal, then a progress dialog will be displayed to you. This will attempt to show you estimated remaining time, and the current progress of all executing modules.","sidebar":"tutorialSidebar"},"how-to/custom-commands":{"id":"how-to/custom-commands","title":"Custom Commands","description":"Many common CLI tools, such as npm, yarn, dotnet, docker, kubectl, have all had strong objects created to wrap around their CLI commands.","sidebar":"tutorialSidebar"},"how-to/defining-modules":{"id":"how-to/defining-modules","title":"Defining Modules","description":"Defining Modules","sidebar":"tutorialSidebar"},"how-to/execution-and-dependencies":{"id":"how-to/execution-and-dependencies","title":"Execution and Dependencies","description":"The default behaviour is for modules to run in parallel, to speed up a pipeline as much as possible.","sidebar":"tutorialSidebar"},"how-to/hooks":{"id":"how-to/hooks","title":"Hooks","description":"Module Hooks","sidebar":"tutorialSidebar"},"how-to/ignoring-failures":{"id":"how-to/ignoring-failures","title":"Ignoring Failures","description":"Sometimes a module might throw an exception, but we simply don\'t care as it\'s not that important, or a specific error might be expected.","sidebar":"tutorialSidebar"},"how-to/inheriting":{"id":"how-to/inheriting","title":"Inheriting","description":"Each \'Module\' is expected to be registered only once. If you build a custom module that you\'d like to instantiate multiple times but with different options, then you should create a new Module type that inherits from an abstract base module.","sidebar":"tutorialSidebar"},"how-to/logging":{"id":"how-to/logging","title":"Logging","description":"IModuleLogger","sidebar":"tutorialSidebar"},"how-to/parallelization":{"id":"how-to/parallelization","title":"Parallelization","description":"As mentioned, modules will try to run in parallel by default, waiting on any dependencies if they need to.","sidebar":"tutorialSidebar"},"how-to/pipeline-host":{"id":"how-to/pipeline-host","title":"Pipeline Host","description":"To begin creating your pipeline, your entry point is the PipelineHostBuilder.","sidebar":"tutorialSidebar"},"how-to/pipeline-modes":{"id":"how-to/pipeline-modes","title":"Pipeline Execution Modes","description":"A pipeline has two execution modes:","sidebar":"tutorialSidebar"},"how-to/requirements":{"id":"how-to/requirements","title":"Requirements","description":"If you\'d like to fail fast, you can register some Requirement classes that do some checks on start up to make sure things are as expected.","sidebar":"tutorialSidebar"},"how-to/retry-policy":{"id":"how-to/retry-policy","title":"Retry Policies","description":"When creating modules, you can set a retry policy per module by overriding the RetryPolicy property. The retry policy uses a Polly policy, so if you\'ve used Polly before you should be familiar with how to use it.","sidebar":"tutorialSidebar"},"how-to/run-conditions":{"id":"how-to/run-conditions","title":"Run conditions","description":"Run conditions gives us a way to easily skip or run modules based on some custom, reusable logic.","sidebar":"tutorialSidebar"},"how-to/secrets":{"id":"how-to/secrets","title":"Secrets","description":"Use IOptions\\\\","sidebar":"tutorialSidebar"},"how-to/sharing-data":{"id":"how-to/sharing-data","title":"Sharing data across modules","description":"Modules have been designed with data and sharing at its core.","sidebar":"tutorialSidebar"},"how-to/skipping":{"id":"how-to/skipping","title":"Skipping Modules","description":"Overriding ShouldSkip","sidebar":"tutorialSidebar"},"how-to/storing-and-retrieving-results":{"id":"how-to/storing-and-retrieving-results","title":"Module History","description":"What is it?","sidebar":"tutorialSidebar"},"how-to/sub-modules":{"id":"how-to/sub-modules","title":"Sub-Modules","description":"What are they?","sidebar":"tutorialSidebar"},"how-to/time-estimator":{"id":"how-to/time-estimator","title":"Time Estimator","description":"The time estimator is a class built by you, used to estimate times for modules for displaying in the console progress dialog. It isn\'t mandatory, but without it, estimated times will not be correct.","sidebar":"tutorialSidebar"},"how-to/timeouts":{"id":"how-to/timeouts","title":"Timeouts","description":"When creating modules, you can set a timeout per module by overriding the Timeout property. You can set this to any timespan you like. Just bear in mind some build runners, like GitHub actions, have their own timeouts, so extending past these won\'t help.","sidebar":"tutorialSidebar"},"mp-packages/github":{"id":"mp-packages/github","title":"GitHub Package","description":"The GitHub package offered by Modular Pipelines, in conjunction with the implemented OctoKit client library, facilitates a streamlined approach to interacting with remote GitHub repositories.","sidebar":"tutorialSidebar"},"README":{"id":"README","title":"Modular Pipelines","description":"About","sidebar":"tutorialSidebar"},"why":{"id":"why","title":"Why Modular Pipelines?","description":"C# / .NET","sidebar":"tutorialSidebar"}}}}')}}]);