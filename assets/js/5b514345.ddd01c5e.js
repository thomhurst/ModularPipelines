"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[166],{7647:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"how-to/parallelization","title":"Parallelization","description":"As mentioned, modules will try to run in parallel by default, waiting on any dependencies if they need to.","source":"@site/docs/how-to/parallelization.md","sourceDirName":"how-to","slug":"/how-to/parallelization","permalink":"/ModularPipelines/docs/how-to/parallelization","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Parallelization"},"sidebar":"tutorialSidebar","previous":{"title":"Inheriting","permalink":"/ModularPipelines/docs/how-to/inheriting"},"next":{"title":"Pipeline Execution Modes","permalink":"/ModularPipelines/docs/how-to/pipeline-modes"}}');var i=l(4848),a=l(8453);const o={title:"Parallelization"},s="Parallelization Disabling",r={},c=[{value:"Example",id:"example",level:2},{value:"Example",id:"example-1",level:2},{value:"Example",id:"example-2",level:2},{value:"Caveats",id:"caveats",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"parallelization-disabling",children:"Parallelization Disabling"})}),"\n",(0,i.jsx)(n.p,{children:"As mentioned, modules will try to run in parallel by default, waiting on any dependencies if they need to."}),"\n",(0,i.jsx)(n.p,{children:"However, sometimes modules don't have any dependencies, but also it isn't a good idea trying to run them in parallel."}),"\n",(0,i.jsx)(n.p,{children:"As example of this could be installing applications. Windows for instance, doesn't like you trying to install multiple applications at the same time."}),"\n",(0,i.jsxs)(n.p,{children:["So if you want any modules to be run without parallelisation, there is the ",(0,i.jsx)(n.code,{children:"NotInParallel"})," attribute."]}),"\n",(0,i.jsx)(n.p,{children:"These modules will attempt to run first, before all other modules that can be run in parallel.\nIf these have any dependencies, they will be triggered too."}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"[NotInParallel]\npublic class MyModule : Module\n{\n    protected override Task<IDictionary<string, object>?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        // Do something\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Not ",(0,i.jsx)(n.code,{children:"NotInParallel"})," attribute can also take a ",(0,i.jsx)(n.code,{children:"ConstraintKey"})," parameter.\nIf this is set, then a module will not run in parallel with other modules containing the same constraint key.\nIf another module has a different constraint key, these will still run in parallel."]}),"\n",(0,i.jsx)(n.h2,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'[NotInParallel(ConstraintKey = "Install")]\npublic class InstallModule1 : Module\n{\n    protected override Task<IDictionary<string, object>?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        // Do something\n    }\n}\n\n[NotInParallel(ConstraintKey = "Install")]\npublic class InstallModule2 : Module\n{\n    protected override Task<IDictionary<string, object>?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        // Do something\n    }\n}\n\n[NotInParallel(ConstraintKey = "Build")]\npublic class BuildProjectModule : Module\n{\n    protected override Task<IDictionary<string, object>?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        // Do something\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, ",(0,i.jsx)(n.code,{children:"InstallModule1"})," and ",(0,i.jsx)(n.code,{children:"InstallModule2"})," will not run at the same time. However, either of them could run at the same time as ",(0,i.jsx)(n.code,{children:"BuildProjectModule"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"parallel-limiter",children:"Parallel Limiter"}),"\n",(0,i.jsx)(n.p,{children:"ModularPipelines allows the user to control the parallel limit on specific modules."}),"\n",(0,i.jsxs)(n.p,{children:["To do this, we add a ",(0,i.jsx)(n.code,{children:"[ParallelLimiter<>]"})," attribute."]}),"\n",(0,i.jsxs)(n.p,{children:["You'll notice this has a generic type argument - You must give it a type that implements ",(0,i.jsx)(n.code,{children:"IParallelLimit"})," and has a public empty constructor. That interface requires you to define what the limit is for those modules."]}),"\n",(0,i.jsx)(n.p,{children:"If a module doesn't have a parallel limit defined, it'll try and eagerly run when the .NET thread pool allows it to do so."}),"\n",(0,i.jsxs)(n.p,{children:["If it does have a parallel limit defined, be aware that that parallel limit is shared for any modules with that same ",(0,i.jsx)(n.code,{children:"Type"})," of parallel limit."]}),"\n",(0,i.jsxs)(n.p,{children:["In the example below, ",(0,i.jsx)(n.code,{children:"MyParallelLimit"})," has a limit of ",(0,i.jsx)(n.code,{children:"2"}),". Now any module that has this parallel limit attribute applied to it, will only be processed 2 at a time."]}),"\n",(0,i.jsx)(n.p,{children:"Other modules without this attribute may run alongside them still."}),"\n",(0,i.jsxs)(n.p,{children:["And other modules with a different ",(0,i.jsx)(n.code,{children:"Type"})," of parallel limit may also run alongside them still, but limited amongst themselves by their shared ",(0,i.jsx)(n.code,{children:"Type"})," and limit."]}),"\n",(0,i.jsxs)(n.p,{children:["So be aware that limits are only shared among modules with that same ",(0,i.jsx)(n.code,{children:"IParallelLimit"})," ",(0,i.jsx)(n.code,{children:"Type"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using TUnit.Core;\n\nnamespace MyTestProject;\n\n[ParallelLimiter<MyParallelLimit>]\npublic class InstallModule1 : Module\n{\n    protected override Task<IDictionary<string, object>?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        // Do something\n    }\n}\n\n[ParallelLimiter<MyParallelLimit>]\npublic class InstallModule2 : Module\n{\n    protected override Task<IDictionary<string, object>?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        // Do something\n    }\n}\n\n[ParallelLimiter<MyParallelLimit>]\npublic class BuildProjectModule : Module\n{\n    protected override Task<IDictionary<string, object>?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        // Do something\n    }\n}\n\npublic record MyParallelLimit : IParallelLimit\n{\n    public int Limit => 2;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"caveats",children:"Caveats"}),"\n",(0,i.jsxs)(n.p,{children:["If a test uses ",(0,i.jsx)(n.code,{children:"[DependsOn(nameof(OtherTest))]"})," and the other test has its own different parallel limit, this isn't guaranteed to be honoured."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>o,x:()=>s});var t=l(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);