"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[370],{3855:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"examples/single-file-csharp","title":"Single File C# Example","description":"Starting with dotnet 10 (preview 4), you can use the new file-based C# application feature to write scripts in C# without needing to create a full project structure. This is particularly useful for quick scripts or small utilities.","source":"@site/docs/examples/single-file-csharp.md","sourceDirName":"examples","slug":"/examples/single-file-csharp","permalink":"/ModularPipelines/docs/examples/single-file-csharp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Single File C# Example"},"sidebar":"tutorialSidebar","previous":{"title":"Fully Orchestrated Example","permalink":"/ModularPipelines/docs/examples/example"},"next":{"title":"Why Modular Pipelines?","permalink":"/ModularPipelines/docs/why"}}');var l=i(4848),s=i(8453);const o={title:"Single File C# Example"},a=void 0,r={},c=[{value:"Using File-Based C# Application with ModularPipelines",id:"using-file-based-c-application-with-modularpipelines",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"Starting with dotnet 10 (preview 4), you can use the new file-based C# application feature to write scripts in C# without needing to create a full project structure. This is particularly useful for quick scripts or small utilities."}),"\n",(0,l.jsx)(n.h2,{id:"using-file-based-c-application-with-modularpipelines",children:"Using File-Based C# Application with ModularPipelines"}),"\n",(0,l.jsx)(n.p,{children:"To use ModularPipelines in a single file C# application, you can follow these steps:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Create a C# file"}),": Create a new file named ",(0,l.jsx)(n.code,{children:"example.cs"})," (or any name with ",(0,l.jsx)(n.code,{children:".cs"})," extension)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Add ModularPipelines to your project"}),": You can add TUnit as a package reference in your file. At the top of your ",(0,l.jsx)(n.code,{children:"example.cs"}),", add the following line:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"#:package ModularPipelines@2.*\n"})}),"\n",(0,l.jsx)(n.p,{children:"Alternatively, you can specify a specific version:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"#:package ModularPipelines@2.44.45\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Write your C# code"}),": Below the package reference, you can write your C# code using ModularPipelines. Here\u2019s a simple example that uses ModularPipelines to check the dotnet version:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"#!/usr/bin/dotnet run\n#:package ModularPipelines.DotNet@2.44.*\nusing ModularPipelines.Attributes;\nusing ModularPipelines.Context;\nusing ModularPipelines.DotNet.Extensions;\nusing ModularPipelines.Host;\nusing ModularPipelines.Models;\nusing ModularPipelines.Modules;\n\nawait PipelineHostBuilder.Create()\n    .AddModule<UpdateDotnetWorkloads>()\n    .AddModule<CheckDotnetSdkModule>()\n    .ExecutePipelineAsync();\n\npublic class UpdateDotnetWorkloads : Module<CommandResult>\n{\n    protected override async Task<CommandResult?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        return await context.DotNet().DotNetWorkload.Update(token: cancellationToken);\n    }\n}\n\n[DependsOn<UpdateDotnetWorkloads>]\npublic class CheckDotnetSdkModule : Module<CommandResult>\n{\n\n    protected override async Task<CommandResult?> ExecuteAsync(IPipelineContext context, CancellationToken cancellationToken)\n    {\n        return await context.DotNet().Sdk.Check(token: cancellationToken);\n    }\n}\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Run your script"}),": You can run your script directly using the ",(0,l.jsx)(n.code,{children:"dotnet run"})," command. Make sure you have the .NET SDK installed and available in your PATH."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-powershell",children:"dotnet run example.cs\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"If you need to convert the file based application to a regular C# project, you can run the following command:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-powershell",children:"dotnet project convert example.cs\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const l={},s=t.createContext(l);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);